import cloneDeep from '../src/utils/cloneDeep';

const appComponent = {
  id: 1,
  stateful: false,
  componentState: [],
  title: 'App',
  color: '#FF6D00',
  props: [],
  nextPropId: 1,
  childrenArray: [],
  nextChildId: 1,
  focusChildId: 0,
  selectors: [],
  actions: [],
};

const initialApplicationFocusChild = {
  childId: 0,
  componentName: null,
  childType: null,
  childSort: 0,
  childComponentId: 0,
  color: null,
  htmlElement: null,
  HTMLInfo: null,
};

export const initialAppStateMock = {
  totalComponents: 1,
  nextId: 2,
  successOpen: false,
  errorOpen: false,
  focusComponent: appComponent,
  selectableChildren: [],
  ancestors: [],
  initialApplicationFocusChild,
  focusChild: cloneDeep(initialApplicationFocusChild),
  components: [appComponent],
  appDir: '',
  loading: false,
  storeConfig: { interfaces: {}, reducers: {} },
};

export const aboutToAddChildMock = {
  totalComponents: 2,
  nextId: 3,
  successOpen: false,
  errorOpen: false,
  focusComponent: {
    id: 1,
    stateful: false,
    componentState: [],
    title: 'App',
    color: '#FF6D00',
    props: [],
    nextPropId: 1,
    childrenArray: [],
    nextChildId: 1,
    focusChildId: 0,
    selectors: [],
    actions: [],
  },
  selectableChildren: [2],
  ancestors: [],
  initialApplicationFocusChild: {
    childId: 0,
    componentName: null,
    childType: null,
    childSort: 0,
    childComponentId: 0,
    color: null,
    htmlElement: null,
    HTMLInfo: null,
  },
  focusChild: {
    childId: 0,
    componentName: null,
    childType: null,
    childSort: 0,
    childComponentId: 0,
    color: null,
    htmlElement: null,
    HTMLInfo: null,
  },
  components: [
    {
      id: 1,
      stateful: false,
      componentState: [],
      title: 'App',
      color: '#FF6D00',
      props: [],
      nextPropId: 1,
      childrenArray: [],
      nextChildId: 1,
      focusChildId: 0,
      selectors: [],
      actions: [],
    },
    {
      id: 2,
      stateful: false,
      componentState: [],
      title: 'Child',
      color: '#7395AE',
      props: [],
      nextPropId: 1,
      childrenArray: [],
      nextChildId: 1,
      focusChildId: 0,
      selectors: [],
      actions: [],
    },
  ],
  appDir: '',
  loading: false,
  storeConfig: {
    interfaces: {},
    reducers: {},
  },
};

export const aboutToDeleteComponentMock = {
  totalComponents: 2,
  nextId: 3,
  successOpen: false,
  errorOpen: false,
  focusComponent: {
    id: 2,
    stateful: false,
    componentState: [],
    title: 'Test',
    color: '#E27D60',
    props: [],
    nextPropId: 1,
    childrenArray: [],
    nextChildId: 1,
    focusChildId: 0,
    selectors: [],
    actions: [],
  },
  selectableChildren: [1],
  ancestors: [],
  initialApplicationFocusChild: {
    childId: 0,
    componentName: null,
    childType: null,
    childSort: 0,
    childComponentId: 0,
    color: null,
    htmlElement: null,
    HTMLInfo: null,
  },
  focusChild: {
    childId: 0,
    componentName: null,
    childType: null,
    childSort: 0,
    childComponentId: 0,
    color: null,
    htmlElement: null,
    HTMLInfo: null,
  },
  components: [
    {
      id: 1,
      stateful: false,
      componentState: [],
      title: 'App',
      color: '#FF6D00',
      props: [],
      nextPropId: 1,
      childrenArray: [],
      nextChildId: 1,
      focusChildId: 0,
      selectors: [],
      actions: [],
    },
    {
      id: 2,
      stateful: false,
      componentState: [],
      title: 'Test',
      color: '#E27D60',
      props: [],
      nextPropId: 1,
      childrenArray: [],
      nextChildId: 1,
      focusChildId: 0,
      selectors: [],
      actions: [],
    },
  ],
  appDir: '',
  loading: false,
  storeConfig: {
    interfaces: {},
    reducers: {},
  },
};
